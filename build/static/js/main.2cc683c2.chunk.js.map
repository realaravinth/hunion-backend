{"version":3,"sources":["app/reducers/authSlice.ts","app/API/api.tsx","components/Ncurses/wrapper/WithMenuOuter.tsx","app/reducers/startTimeSlice.ts","app/reducers/challengeSlice.ts","app/store.ts","app/utils/persistState.ts","components/Heading/CountDown/CountDown.tsx","components/Heading/CountDown/index.tsx","components/AsciiArt/index.tsx","components/AsciiArt/AsciiArt.tsx","components/Heading/index.tsx","components/Heading/Heading.tsx","components/Navbar/NavChallenges.tsx","components/Navbar/NavLeaderboard.tsx","components/Navbar/NavLogout.tsx","components/Navbar/NavLogin.tsx","components/Navbar/index.tsx","components/Navbar/Navbar.tsx","components/Ncurses/wrapper/WithContentContainer.tsx","components/Ncurses/wrapper/WithMenuDialog.tsx","components/Ncurses/PageTitle.tsx","components/Ncurses/Border/MenuBottomBorder.tsx","components/Ncurses/Border/MenuTopBorder.tsx","components/Ncurses/Border/MenuBorder.tsx","components/Ncurses/MenuTitle.tsx","components/Ncurses/MenuTopText.tsx","components/Challenges/ShowQuestion.tsx","components/Ncurses/BanMobileDecives.tsx","app/API/login.ts","app/utils/blankString.ts","components/Ncurses/TextInput.tsx","components/Ncurses/wrapper/WithMenuButton.tsx","components/Login/index.tsx","components/Login/Login.tsx","components/Leaderboard/index.tsx","components/Leaderboard/Leaderboard.tsx","app/API/checkResponse.ts","components/Challenges/ShowTitles.tsx","components/Ncurses/wrapper/WithContentColumned.tsx","components/Ncurses/wrapper/WithContentSidebar.tsx","components/Ncurses/wrapper/WithContentSidebarBody.tsx","components/Challenges/index.tsx","components/Challenges/Challenges.tsx","components/Root/index.tsx","components/Root/Root.tsx","app/API/logout.ts","components/Logout/index.tsx","components/Logout/Logout.tsx","components/Loading/ProgressBar.tsx","components/Loading/index.tsx","components/Loading/Loading.tsx","components/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","app/API/getState.ts"],"names":["isAuthenticated","API","GET_CHALLENGES","LOGIN","REGISTER","LOGOUT","CHECK_RESPONSE","LEADERBOARD","GET_STATE","menuDialogSize","initialState","value","loggedOut","authSlice","createSlice","name","reducers","setLoggedIn","state","loggedIn","setLoggedOut","setTimeOver","timerOver","setTooEarly","tooEarly","setChallengeReady","challengeReady","actions","selectAuth","authenticator","startTimeSlice","set_start_time","action","payload","selectstartTime","startTimesetter","challengeSlice","addChallenge","addAnswer","prevState","id","challengeAnswer","setHasAnswered","hasAnswered","selectChallenge","challenges","persistedState","searializedState","localStorage","getItem","JSON","parse","e","loadState","store","configureStore","reducer","preloadedState","useAppDispatch","useDispatch","CountDownNotNull","initTimeinSeconds","initTimeinMinutes","useState","timeInSeconds","setTimeInSeconds","timeInMinutes","setTimeInMinutes","useEffect","timer","setTimeout","tick","clearTimeout","history","useHistory","push","presentableTime","time","toString","CountDown","authVal","useSelector","startTime","console","error","CHALLENGE_DURATION","Math","floor","Date","now","AsciiArt","dangerouslySetInnerHTML","__html","Heading","className","to","NavChallenges","NavLeaderboard","NavLogout","NavLogin","Navbar","WithContentContainer","children","WithMenuOuter","size","loading","PageTitle","location","title","document","setPageTitle","MenuBottomBorder","MenuTopBorder","MenuBorder","MenuTitle","MenuTopText","text","showHintVals","WithMenuDialog","menuTitle","pageTitle","topText","classes","big","mobile","BanMobileDevices","login","a","fetch","method","headers","body","stringify","isBlankString","replace","length","TextInput","label","required","autoFocus","autoComplete","input_type","placeholder","onChange","type","WithMenuButtonSmall","onClick","WithMenuButton","Login","userID","setUserID","dispatch","small","event","target","preventDefault","alert","then","data","status","json","parseInt","credentials","res","log","catch","Leaderboard","authState","leaderboard","setLeaderboard","setUserScore","getLeaderboard","result","leaderboardVals","topTwenty","map","person","score","you","binarySet","RegExp","FirstQuestion","hintState","showFlag","noHint","ShowQuestion","prelude","showHint","setShowHint","currentQAnswer","test","showBinToDecHint","checkResponse","userAnswer","isCorrect","ShowTitles","Titles","activeID","c","key","challengeTitle","WithContentColumned","WithContentSidebar","WithContentSidebarBody","Challenges","init","currentQ","setCurrentQ","challengeBody","currentQBody","setCurrentQBody","forEach","i","setBody","Root","setItem","logout","response","Logout","ProgressBar","completed","fillerBoxStyles","height","width","border","borderColor","textAlign","numBoxes","boxes","_","style","display","Loading","Routes","component","path","exact","App","window","matchMedia","matches","Boolean","hostname","match","subscribe","saveState","getState","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2cc683c2.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nimport {RootState} from '../store';\n\nimport {getState} from '../API/getState';\n\nexport interface authState {\n  value: isAuthenticated;\n}\n\nexport enum isAuthenticated {\n  loggedOut,\n  loggedIn,\n  timerOver,\n  tooEarly,\n  challengeReady,\n}\n\nconst initialState: authState = {\n  value: isAuthenticated.loggedOut,\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setLoggedIn: state => {\n      state.value = isAuthenticated.loggedIn;\n    },\n    setLoggedOut: state => {\n      state.value = isAuthenticated.loggedOut;\n    },\n    setTimeOver: state => {\n      state.value = isAuthenticated.timerOver;\n    },\n    setTooEarly: state => {\n      state.value = isAuthenticated.tooEarly;\n    },\n    setChallengeReady: state => {\n      state.value = isAuthenticated.challengeReady;\n    },\n  },\n});\n\nexport const {\n  setLoggedIn,\n  setLoggedOut,\n  setChallengeReady,\n  setTooEarly,\n  setTimeOver,\n} = authSlice.actions;\n\nexport const thunkedGetState = () => (\n  dispatch: any,\n) =>\n  getState().then((res: any) => {\n    if (res.status === 200) {\n      dispatch(setLoggedIn());\n    }\n  });\n\nexport const selectAuth = (state: RootState) => state.authenticator.value;\n\nexport default authSlice.reducer;\n","type apiEndpoints = {\n  GET_CHALLENGES: string;\n  LOGIN: string;\n  REGISTER: string;\n  LOGOUT: string;\n  CHECK_RESPONSE: string;\n  LEADERBOARD: string;\n  GET_STATE: string;\n};\n\nconst API: apiEndpoints = {\n  GET_CHALLENGES: 'http://localhost:8080/api/get-challenges',\n  LOGIN: 'http://localhost:8080/api/login',\n  REGISTER: '/api/register',\n  LOGOUT: '/api/logout',\n  CHECK_RESPONSE: 'http://localhost:8080/api/check-response',\n  LEADERBOARD: '/api/leaderboard',\n  GET_STATE: 'http://localhost:8080/api/get-state',\n};\n\nexport default API;\n","import React from 'react';\n\nenum menuDialogSize {\n  big,\n  small,\n  mobile,\n  loading,\n}\n\ntype withMenuOuterProps = {\n  size: menuDialogSize;\n};\n\nconst WithMenuOuter: React.FC<withMenuOuterProps> = ({children, size}) => {\n  if (size === menuDialogSize.loading) {\n    return <div className=\"menuouter menuouterloading\">{children}</div>;\n  }\n  return <div className=\"menuouter\">{children}</div>;\n};\n\nexport default WithMenuOuter;\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\nimport {RootState} from '../store';\n\nexport type startTimeState = {\n  value: null | number;\n};\n\nconst initialState: startTimeState = {\n  value: null, //Math.floor(Date.now() / 1000)\n};\n\nexport const startTimeSlice = createSlice({\n  name: 'startTime',\n  initialState,\n  reducers: {\n    set_start_time: (state, action: PayloadAction<number>) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const {set_start_time} = startTimeSlice.actions;\n\nexport const selectstartTime = (state: RootState) =>\n  state.startTimesetter.value;\n\nexport default startTimeSlice.reducer;\n","import {\n  createSlice,\n  nanoid,\n  createAsyncThunk,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n\nimport {RootState} from '../store';\n\nimport {getChallenges} from '../API/getChallenges';\n\nexport interface challengeState {\n  value: null | challenge[];\n}\n\nexport type challenge = {\n  id: number;\n  challengeTitle: string;\n  challengeBody: string;\n  challengeAnswer: string;\n  score: number;\n  hasAnswered: boolean;\n};\n\nconst initialState: challengeState = {\n  value: null,\n};\n\nexport type answerUpdate = {\n  id: number;\n  challengeAnswer: string;\n};\n\nexport const challengeSlice = createSlice({\n  name: 'challenge',\n  initialState,\n  reducers: {\n    addChallenge: (state, action: PayloadAction<challenge[]>) => {\n      state.value = action.payload;\n    },\n    addAnswer: (state, action: PayloadAction<answerUpdate>) => {\n      let prevState = state.value;\n      if (prevState !== null) {\n        prevState[action.payload.id - 1].challengeAnswer =\n          action.payload.challengeAnswer;\n        state.value = prevState;\n        //        //(c => {\n        //          if (c.id === action.payload.id) {\n        //            c.challengeAnswer = action.payload.challengeAnswer;\n        //            return c;\n        //          } else return c;\n        //        });\n      }\n    },\n    setHasAnswered: (state, action: PayloadAction<number>) => {\n      let prevState = state.value;\n      if (prevState !== null) {\n        prevState[action.payload].hasAnswered = true;\n        state.value = prevState;\n      }\n    },\n  },\n});\n\nexport const {addChallenge, setHasAnswered, addAnswer} = challengeSlice.actions;\n\nexport const thunkedGetChallenges = () => (dispatch: any) =>\n  getChallenges()\n    .then(res => {\n      if (res.status === 200) return res.json();\n    })\n    .then(res => dispatch(addChallenge(res)));\n\nexport const fetchChallenges = () => async () => {\n  const response = await (await getChallenges()).json();\n  return response;\n};\n\nexport const selectChallenge = (state: RootState) => state.challenges.value;\n\nexport const currentQAnswer = (c: challengeState, id: number) => {\n  if (c.value !== null) return c.value[id].challengeAnswer;\n  else return '';\n};\n\nexport default challengeSlice.reducer;\n","import {configureStore} from '@reduxjs/toolkit';\nimport {useDispatch} from 'react-redux';\nimport {authSlice} from './reducers/authSlice';\nimport {startTimeSlice} from './reducers/startTimeSlice';\nimport {challengeSlice} from './reducers/challengeSlice';\nimport {loadState} from './utils/persistState';\n\nconst persistedState = loadState();\n\nexport const store = configureStore({\n  reducer: {\n    authenticator: authSlice.reducer,\n    startTimesetter: startTimeSlice.reducer,\n    challenges: challengeSlice.reducer,\n  },\n  preloadedState: persistedState,\n});\n\ntype AppDisatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDisatch>();\nexport type RootState = ReturnType<typeof store.getState>;\n","export const loadState = () => {\n  try {\n    const searializedState = localStorage.getItem('state');\n    if (searializedState == null) {\n      return undefined;\n    }\n    return JSON.parse(searializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: any) => {\n  try {\n    const searializedState = JSON.stringify(state);\n    localStorage.setItem('state', searializedState);\n  } catch (e) {\n    console.log(`error from saveState: ${e}`);\n  }\n};\n","import React, {useState, useEffect} from 'react';\nimport {useSelector} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nimport {selectAuth, isAuthenticated} from '../../../app/reducers/authSlice';\nimport {selectstartTime} from '../../../app/reducers/startTimeSlice';\n\nconst ABSOLUTE_CHALLENGE_DURATION: number = 25 * 60; //in seconds\n\nconst CountDown: React.FC = () => {\n  const authVal = useSelector(selectAuth);\n  const startTime = useSelector(selectstartTime);\n\n  const history = useHistory();\n  if (authVal !== isAuthenticated.challengeReady) return <div />;\n\n  if (startTime === null) {\n    console.error(\n      `can't mount timer,\n        startTime yet to be received from API. startTime: ${startTime}`,\n    );\n    return <div />;\n  }\n\n  const END_TIME: number = startTime + ABSOLUTE_CHALLENGE_DURATION;\n  const CHALLENGE_DURATION: number = END_TIME - Math.floor(Date.now() / 1000); //relative time\n  //calculating time:\n  const initTimeinSeconds: number = CHALLENGE_DURATION % 60;\n  if (initTimeinSeconds < 0) history.push('/logout');\n  const initTimeinMinutes: number =\n    (CHALLENGE_DURATION - initTimeinSeconds) / 60;\n  return (\n    <CountDownNotNull\n      initTimeinMinutes={initTimeinMinutes}\n      initTimeinSeconds={initTimeinSeconds}\n    />\n  );\n};\n\ntype CountDownNotNullProps = {\n  initTimeinMinutes: number;\n  initTimeinSeconds: number;\n};\n\nconst CountDownNotNull: React.FC<CountDownNotNullProps> = ({\n  initTimeinSeconds,\n  initTimeinMinutes,\n}) => {\n  const [timeInSeconds, setTimeInSeconds] = useState(initTimeinSeconds);\n  const [timeInMinutes, setTimeInMinutes] = useState(initTimeinMinutes);\n\n  useEffect(() => {\n    const timer = setTimeout(() => tick(), 1000);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  });\n\n  const history = useHistory();\n  const tick = () => {\n    if (timeInSeconds < 0) history.push('/logout');\n    if (timeInSeconds === 1 && timeInMinutes === 0) {\n      history.push('/logout');\n    }\n    if (timeInSeconds === 0) {\n      setTimeInSeconds(59);\n      setTimeInMinutes(timeInMinutes - 1);\n    } else {\n      setTimeInSeconds(timeInSeconds - 1);\n    }\n  };\n\n  return (\n    <div>\n      {presentableTime(timeInMinutes)}:{presentableTime(timeInSeconds)}\n    </div>\n  );\n};\n\nconst presentableTime = (time: number) => {\n  if (time < 10) {\n    return '0' + time.toString();\n  } else {\n    return time.toString();\n  }\n};\n\nexport default CountDown;\n","import CountDown from './CountDown';\nexport default CountDown;\n","import AsciiArt from './AsciiArt';\nexport default AsciiArt;\n","import React from 'react';\n\nconst AsciiArt: React.FC= () => (\n\t<div \n\t\tdangerouslySetInnerHTML={{__html:'<p class=\"ascii-art\">███╗&nbsp&nbsp&nbsp██╗██╗&nbsp&nbsp&nbsp██╗██╗&nbsp&nbsp&nbsp&nbsp&nbsp██╗&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp██████╗████████╗███████╗<br /> ████╗&nbsp&nbsp██║██║&nbsp&nbsp&nbsp██║██║&nbsp&nbsp&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp██╔════╝╚══██╔══╝██╔════╝<br /> ██╔██╗&nbsp██║██║&nbsp&nbsp&nbsp██║██║&nbsp&nbsp&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp█████╗&nbsp&nbsp<br /> ██║╚██╗██║██║&nbsp&nbsp&nbsp██║██║&nbsp&nbsp&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp██╔══╝&nbsp&nbsp<br /> ██║&nbsp╚████║╚██████╔╝███████╗███████╗&nbsp&nbsp&nbsp&nbsp╚██████╗&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp██║&nbsp&nbsp&nbsp&nbsp&nbsp<br /> ╚═╝&nbsp&nbsp╚═══╝&nbsp╚═════╝&nbsp╚══════╝╚══════╝&nbsp&nbsp&nbsp&nbsp&nbsp╚═════╝&nbsp&nbsp&nbsp╚═╝&nbsp&nbsp&nbsp╚═╝&nbsp&nbsp&nbsp&nbsp&nbsp<br />'}}> \n\t</div>\n\n);\n\nexport default AsciiArt;\n","import Heading from './Heading';\n\nexport default Heading;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n//components\nimport CountDown from './CountDown';\nimport AsciiArt from './../AsciiArt';\n\nconst Heading: React.FC = () => (\n  <div className=\"mainheader\">\n    <Link to=\"/\">\n      <AsciiArt />\n    </Link>\n    <div className=\"filler\" />\n    <div className=\"timer\">\n      <CountDown />\n    </div>\n  </div>\n);\n\nexport default Heading;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst NavChallenges: React.FC = () => (\n  <li>\n    <NavLink to=\"/challenges\">/challenges</NavLink>\n  </li>\n);\n\nexport default NavChallenges;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst NavLeaderboard: React.FC = () => (\n  <li>\n    <NavLink to=\"/leaderboard\">/leaderboard</NavLink>\n  </li>\n);\n\nexport default NavLeaderboard;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst NavLogout: React.FC = () => (\n  <li>\n    <NavLink to=\"/logout\">/logout</NavLink>\n  </li>\n);\n\nexport default NavLogout;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst NavLogin: React.FC = () => (\n  <li>\n    <NavLink to=\"/login\">/login</NavLink>\n  </li>\n);\n\nexport default NavLogin;\n","import Navbar from './Navbar';\nexport default Navbar;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {selectAuth, isAuthenticated} from '../../app/reducers/authSlice';\n\nimport NavChallenges from './NavChallenges';\nimport NavLeaderboard from './NavLeaderboard';\nimport NavLogout from './NavLogout';\nimport NavLogin from './NavLogin';\n\nconst Navbar: React.FC = () => {\n  const authState = useSelector(selectAuth);\n\n  if (authState === isAuthenticated.challengeReady) {\n    return (\n      <ul className=\"navbar\">\n        <NavChallenges />\n        <NavLeaderboard />\n        <NavLogout />\n      </ul>\n    );\n  } else {\n    return (\n      <ul className=\"navbar\">\n        <NavLogin />\n      </ul>\n    );\n  }\n};\n\nexport default Navbar;\n","import React from 'react';\n\nconst WithContentContainer: React.FunctionComponent = ({children}) => (\n  <div className=\"menuoptions\">{children}</div>\n);\n\nexport default WithContentContainer;\n","import React from 'react';\n\n//components\nimport WithMenuOuter from './WithMenuOuter';\nimport PageTitle from '../PageTitle';\n\nimport MenuTitle from '../MenuTitle';\nimport MenuTopText from '../MenuTopText';\n\nexport enum menuDialogSize {\n  big,\n  small,\n  mobile,\n  loading,\n}\n\ntype WithMenuDialogProps = {\n  size: menuDialogSize;\n  topText: string;\n  pageTitle: string;\n  menuTitle: string;\n};\n\nconst WithMenuDialog: React.FC<WithMenuDialogProps> = ({\n  menuTitle,\n  pageTitle,\n  topText,\n  size,\n  children,\n}) => {\n  let classes = 'menudialog';\n\n  if (size === menuDialogSize.big) {\n    classes += ' menudialogbig';\n  }\n  if (size === menuDialogSize.mobile) {\n    classes += ' menudialogmobile';\n  }\n  if (size === menuDialogSize.loading) {\n    classes += ' menudialogloading';\n  }\n\n  return (\n    <div className={classes}>\n      <WithMenuOuter size={size}>\n        <MenuTitle title={menuTitle} />\n        <MenuTopText text={topText} />\n        <PageTitle location={pageTitle} />\n        {children}\n      </WithMenuOuter>\n    </div>\n  );\n};\n\nexport default WithMenuDialog;\n","import React, {useEffect} from 'react';\n\ntype PageTitleProps = {\n  location: string;\n};\nconst PageTitle: React.FC<PageTitleProps> = ({location}) => {\n  const setPageTitle = () => {\n    const title = location + ' | Null CTF';\n    document.title = title;\n  };\n  useEffect(() => {\n    setPageTitle();\n  });\n\n  return <div />;\n};\n\nexport default PageTitle;\n","import React from 'react';\n\nconst MenuBottomBorder: React.FunctionComponent = () => (\n  <div>\n    <div className=\"menubottomborder\"></div>\n  </div>\n);\n\nexport default MenuBottomBorder;\n","import React from 'react';\n\nconst MenuTopBorder: React.FunctionComponent = () => (\n  <div>\n    <div className=\"menutopborder\"></div>\n  </div>\n);\n\nexport default MenuTopBorder;\n","import React from 'react';\n\n//Components\nimport MenuBottomBorder from './MenuBottomBorder';\nimport MenuTopBorder from './MenuTopBorder';\n\nconst MenuBorder: React.FunctionComponent = () => (\n  <div>\n    <MenuTopBorder />\n    <MenuBottomBorder />\n  </div>\n);\n\nexport default MenuBorder;\n","import React from 'react';\n\n//components\nimport MenuBorder from './Border/MenuBorder';\ntype MenuTitleProps = {\n  title: string;\n};\n\nconst MenuTitle: React.FunctionComponent<MenuTitleProps> = ({title}) => (\n  <div className=\"menuheader\">\n    <span>{title}</span>\n    <MenuBorder />\n  </div>\n);\n\nexport default MenuTitle;\n","import React from 'react';\n\ntype MenuTopTextProps  = {\n  text: string;\n}\n\nconst MenuTopText: React.FunctionComponent<MenuTopTextProps> = ({ text })=> (\n\t<div className=\"menutoptext\">\n\t\t{ text }\n\t</div>\n\n);\n\nexport default MenuTopText;\n\n","import React, {useState} from 'react';\nimport {useHistory, Redirect} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\n\n//redux stuff\nimport {selectAuth, isAuthenticated} from '../../app/reducers/authSlice';\n\nimport {\n  selectChallenge,\n  setHasAnswered,\n  addAnswer,\n  currentQAnswer,\n  answerUpdate,\n} from '../../app/reducers/challengeSlice';\nimport {checkResponse} from '../../app/API/checkResponse';\nimport {useAppDispatch} from '../../app/store';\n//utils\nimport isBlankString from '../../app/utils/blankString';\n\nimport WithMenuButton, {\n  WithMenuButtonSmall,\n} from '../Ncurses/wrapper/WithMenuButton';\nimport MenuNote from '../Ncurses/wrapper/WithMenuNote';\nimport TextInput from '../Ncurses/TextInput';\n\nconst binarySet = new RegExp('^[0-1]+$');\n\nexport type ShowQuestionProps = {\n  id: number;\n  body: string;\n};\n\nenum showHintVals {\n  noHint,\n  showFlag,\n  showBinToDecHint,\n}\nconst ShowQuestion: React.FC<ShowQuestionProps> = ({id, body}) => {\n  const dispatch = useAppDispatch();\n  const [userAnswer, setUserAnswer] = useState('');\n  const history = useHistory();\n  const [showHint, setShowHint] = useState(showHintVals.noHint);\n\n  const challenges = useSelector(selectChallenge);\n  const toggleHint = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (showHint === showHintVals.noHint) {\n      setShowHint(showHintVals.showFlag);\n    }\n  };\n\n  const submitHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (isBlankString(currentQAnswer(id))) {\n      alert(\"can't be empty\");\n    } else {\n      if (binarySet.test(currentQAnswer(id))) {\n        if (id === 1) {\n          if (binarySet.test(currentQAnswer(id))) {\n            setShowHint(showHintVals.showBinToDecHint);\n          }\n        }\n      } else {\n        const payload = JSON.stringify({\n          id: id,\n          userAnswer: currentQAnswer(id),\n        });\n        checkResponse(payload).then(res => {\n          if (res.status === 200) {\n            res.json().then((data: any) => {\n              if (data.isCorrect === true) {\n                dispatch(setHasAnswered(id));\n              } else { alert(\"wrong answer\")}\n            });\n          } else if (res.status === 403) {\n            res.json().then((data: any) => {\n              alert(data.error);\n              history.push(\"/logout\")\n            });\n          }\n        });\n      }\n    }\n  };\n  const updateUserAnswer = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const payload: answerUpdate = {\n      id,\n      challengeAnswer: event.target.value,\n    };\n    dispatch(addAnswer(payload));\n  };\n\n  let prelude;\n  if (id === 1) {\n    prelude = (\n      <div>\n        <div dangerouslySetInnerHTML={{__html: body}} />\n        <FirstQuestion hintState={showHint} onClick={toggleHint} />\n      </div>\n    );\n  } else {\n    prelude = <div dangerouslySetInnerHTML={{__html: body}} />;\n  }\n  const currentQAnswer = (id: number) => {\n    if (challenges !== null)\n      if (challenges[id - 1].challengeAnswer !== null) {\n        return challenges[id - 1].challengeAnswer;\n      } else return ' ';\n    else return ' ';\n  };\n\n  return (\n    <div className=\"challengeBody\">\n      {prelude}\n\n      <div className=\"btnSmallOuter\">\n        <TextInput\n          label={'Flag:'}\n          autoFocus={true}\n          name={'userAnswer'}\n          input_type={'text'}\n          autoComplete={'flag'}\n          placeholder={'Flag'}\n          value={currentQAnswer(id)}\n          onChange={updateUserAnswer}\n          required={true}\n        />\n        <WithMenuButton onClick={submitHandler}>submit</WithMenuButton>\n      </div>\n    </div>\n  );\n};\n\ntype firstQProps = {\n  hintState: showHintVals;\n  onClick(e: React.MouseEvent): void;\n};\n\nconst FirstQuestion: React.FC<firstQProps> = ({hintState, onClick}) => {\n  if (hintState === showHintVals.showFlag) {\n    return <p>Computer: 000111000111011110100100110110100001</p>;\n  } else if (hintState === showHintVals.noHint) {\n    return (\n      <WithMenuButtonSmall onClick={onClick}>\n        Aks computer nicely\n      </WithMenuButtonSmall>\n    );\n  } else {\n    return (\n      <p>\n        Well, the flag that you have entered might be correct but there's no way\n        of verifying it. We, unlike computers, only speak decimal.So can you\n        please present the flag in a way that we understand?{' '}\n      </p>\n    );\n  }\n};\n\nexport default ShowQuestion;\n","import React from 'react';\n\n//Componenets:\n\nimport WithContentContainer from './wrapper/WithContentContainer';\nimport WithMenuDialog, {menuDialogSize} from './wrapper/WithMenuDialog';\n\nconst BanMobileDevices: React.FunctionComponent = () => (\n  <WithMenuDialog\n    size={menuDialogSize.mobile}\n    menuTitle={'Error'}\n    topText={\n      'Mobile devices are not supported. We regret the inconvenience caused.'\n    }\n    pageTitle={'Error'}>\n    <WithContentContainer>\n      <p>\n        This CTF relies heavily on the functionality provided by browsers on\n        desktop computers so please visit us from a desktop computer\n      </p>\n    </WithContentContainer>\n  </WithMenuDialog>\n);\n\nexport default BanMobileDevices;\n","import API from './api';\n\nexport type loginRequestPayload = {\n  userID: string;\n};\n\nexport type loginResponsePayload = {\n  startTime: string;\n};\n\nexport const login = async (payload: loginRequestPayload) =>\n  fetch(API.LOGIN, {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(payload),\n  });\n","const isBlankString = (value: string) => !value.replace(/\\s/g, '').length;\n\nexport  default isBlankString;\n","import React, {ChangeEvent} from 'react';\n\nimport '../../ncurses.css';\n\ntype TextInputProps = {\n  label: string;\n  required: boolean;\n  autoFocus: boolean;\n  autoComplete: string;\n  name: string;\n  input_type: string;\n  placeholder: string;\n  onChange(event: ChangeEvent<HTMLInputElement>): void;\n  value: string;\n};\n\nconst TextInput: React.FunctionComponent<TextInputProps> = ({\n  label,\n  required,\n  autoFocus,\n  autoComplete,\n  name,\n  input_type,\n  placeholder,\n  value,\n  onChange,\n}) => (\n  <div className=\"formGroup\">\n    <label className=\"label\">{label}</label>\n    <input\n      className=\"textInput\"\n      required={required}\n      autoFocus={autoFocus}\n      autoComplete={autoComplete}\n      name={name}\n      type={input_type}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n    />\n  </div>\n);\n\nexport default TextInput;\n","import React from 'react';\n\ntype withMenuButtonProps = {\n  onClick(e: React.MouseEvent): void;\n};\n\nconst WithMenuButton: React.FunctionComponent<withMenuButtonProps> = ({\n  children,\n  onClick,\n}) => (\n  <div className=\"btn\" onClick={onClick}>\n    {children}\n  </div>\n);\n\nexport const WithMenuButtonSmall: React.FunctionComponent<withMenuButtonProps> = ({\n  children,\n  onClick,\n}) => (\n  <div className=\"btnSmallOuter\">\n    <div className=\"btnSmall\" onClick={onClick}>\n      {children}\n    </div>\n  </div>\n);\n\nexport default WithMenuButton;\n","import Login from './Login';\nexport default Login;\n","import React, {useState, ChangeEvent} from 'react';\nimport {Redirect, useHistory} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\n\n// app stuff\nimport {\n  selectAuth,\nsetChallengeReady,\n  isAuthenticated,\n} from '../../app/reducers/authSlice';\nimport {set_start_time} from '../../app/reducers/startTimeSlice';\nimport {useAppDispatch} from '../../app/store';\n\nimport {\n  selectChallenge,\n  thunkedGetChallenges,\n  addChallenge,\n} from '../../app/reducers/challengeSlice';\n\n// api stuff\nimport {\n  login,\n  loginResponsePayload,\n  loginRequestPayload,\n} from '../../app/API/login';\n\n//utils\nimport isBlankString from '../../app/utils/blankString';\n\n//Componenets:\nimport TextInput from '../Ncurses/TextInput';\nimport WithMenuButton from '../Ncurses/wrapper/WithMenuButton';\nimport WithContentContainer from '../Ncurses/wrapper/WithContentContainer';\nimport WithMenuDialog, {\n  menuDialogSize,\n} from '../Ncurses/wrapper/WithMenuDialog';\n\nconst Login: React.FunctionComponent = () => {\n  const [userID, setUserID] = useState('');\n  const dispatch = useAppDispatch();\n  const authVal = useSelector(selectAuth);\n  let history = useHistory();\n\n  const logingHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (isBlankString(userID)) {\n      alert('uesr ID cant be empty');\n    } else {\n      const payload: loginRequestPayload = {\n        userID,\n      };\n\n      login(payload)\n        .then(data => {\n          switch (data.status) {\n            case 200:\n              data\n                .json()\n                .then(time =>\n                  dispatch(set_start_time(parseInt(time.startTime))),\n                );\n\n              fetch('http://localhost:8080/api/get-challenges', {\n                credentials: 'include',\n              })\n                .then(data => data.json())\n                .then(res => dispatch(addChallenge(res)));\n\n              dispatch(setChallengeReady());\n              break;\n            case 401:\n              alert('invalid credentials');\n              break;\n            case 403:\n              data\n                .json()\n                .then(time =>\n                  dispatch(set_start_time(parseInt(time.startTime))),\n                );\n              alert('you are early');\n              break;\n            case 501:\n              alert('Internal server error');\n              break;\n            default:\n              console.log(\n                `Error while trying to login, server returned : ${data.status}`,\n              );\n          }\n        })\n        .catch(e => console.log(`Error occoured: ${e}`));\n    }\n  };\n\n  const updateUserID = (event: ChangeEvent<HTMLInputElement>) =>\n    setUserID(event.target.value);\n  if (authVal === isAuthenticated.loggedOut) {\n    return (\n      <WithMenuDialog\n        size={menuDialogSize.small}\n        menuTitle={'Log in'}\n        pageTitle={'Log in'}\n        topText={'Please Log in to continue'}>\n        <WithContentContainer>\n          <TextInput\n            label={'User ID: '}\n            autoFocus={true}\n            autoComplete={'username'}\n            name={'userId'}\n            input_type={'text'}\n            placeholder={'User ID'}\n            value={userID}\n            onChange={updateUserID}\n            required={true}\n          />\n        </WithContentContainer>\n\n        <WithMenuButton onClick={logingHandler}>\n          <span>L</span>og in\n        </WithMenuButton>\n      </WithMenuDialog>\n    );\n  } else {\n    return <Redirect to=\"/\" />;\n  }\n};\n\nexport default Login;\n","import Leaderboard from './Leaderboard';\nexport default Leaderboard;\n","import React, {useEffect, useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\n\n//redux stuff\nimport {selectAuth, isAuthenticated} from '../../app/reducers/authSlice';\n\n//Componenets:\n\nimport WithContentContainer from '../Ncurses/wrapper/WithContentContainer';\nimport WithMenuDialog, {\n  menuDialogSize,\n} from '../Ncurses/wrapper/WithMenuDialog';\n\nconst Leaderboard: React.FC = () => {\n  const authState = useSelector(selectAuth);\n  const [leaderboard, setLeaderboard] = useState([{}]);\n  const [userScore, setUserScore] = useState('');\n\n\n  useEffect(() => {\n    getLeaderboard()\n  });\n\n\n  const getLeaderboard = () => {\n    fetch('localhost:8080/api/leaderboard', {\n      credentials: 'include',\n    })\n      .then(result => result.json())\n      .then(leaderboardVals => {\n        leaderboardVals.topTwenty.map((person: any) => {\n          let prevState = leaderboard;\n          prevState.push({name: person.name, score: person.score});\n          setLeaderboard(prevState);\n        });\n        setUserScore(leaderboardVals.you.score);\n      });\n  };\n\n  if (authState === isAuthenticated.challengeReady) {\n    return (\n      <WithMenuDialog\n        size={menuDialogSize.big}\n        menuTitle={'Leaderboard'}\n        pageTitle={'Leaderboard'}\n        topText={'Top 10 scores: '}>\n        <WithContentContainer>\n          <p> Scorecard goes here </p>\n        </WithContentContainer>\n      </WithMenuDialog>\n    );\n  } else {\n    return <Redirect to=\"/\" />;\n  }\n};\n\nexport default Leaderboard;\n","import API from './api';\n\nexport const checkResponse = (payload: string) =>\n  fetch(API.CHECK_RESPONSE, {\n    method: 'post',\n    credentials: 'include',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: payload,\n  });\n","import React from 'react';\n\nimport {useSelector} from 'react-redux';\n\nimport {\n  selectChallenge,\n  addAnswer,\n  challenge,\n  currentQAnswer,\n  answerUpdate,\n} from '../../app/reducers/challengeSlice';\ntype showQuestionProps = {\n  onClick(c: number): void;\n  activeID: number,\n};\n\nconst ShowTitles: React.FC<showQuestionProps> = ({activeID, onClick}) => {\n  const challenges = useSelector(selectChallenge);\n  let Titles;\n  if (challenges !== null) {\n    Titles = challenges.map((c: challenge) => {\n      let classes = 'ctitle';\n      if (c.hasAnswered === true) {\n        classes += ' correct';\n      }\n\n      let id = ' ';\n      if (c.id === activeID){\n        id=\"active\";\n      }\n      return (\n        <li key={c.id} id={id} className={classes} onClick={() => onClick(c.id)}>\n          {' '}\n          {c.challengeTitle} ({c.score})\n        </li>\n      );\n    });\n  } else Titles = <div />;\n\n  return <ul id=\"challenges\"> {Titles} </ul>;\n};\n\nexport default ShowTitles;\n","import React from 'react';\n\nconst WithContentColumned: React.FunctionComponent = ({children}) => (\n  <div className=\"contentcolumned\">{children}</div>\n);\n\nexport default WithContentColumned;\n","import React from 'react';\n\nconst WithContentSidebar: React.FunctionComponent = ({children}) => (\n  <div className=\"menuoptions menusidebar\">{children}</div>\n);\n\nexport default WithContentSidebar;\n","import React from 'react';\n\n\n\nconst WithContentSidebarBody: React.FunctionComponent = ({children })=> (\n\t<div className=\"menusidebarbody menuoptions\">\n\t\t\t\t{ children }\n\t</div>\n\n);\n\nexport default WithContentSidebarBody;\n\n","import Challenges from './Challenges';\nexport default Challenges;\n","import React, {useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\n\n//redux stuff\nimport {selectAuth, isAuthenticated} from '../../app/reducers/authSlice';\n\nimport {\n  selectChallenge,\n  addAnswer,\n  fetchChallenges,\n  thunkedGetChallenges,\n  challenge,\n} from '../../app/reducers/challengeSlice';\n\n//Componenets:\nimport ShowQuestion from './ShowQuestion';\nimport ShowTitles from './ShowTitles';\n\nimport WithContentColumned from '../Ncurses/wrapper/WithContentColumned';\nimport WithMenuDialog, {\n  menuDialogSize,\n} from '../Ncurses/wrapper/WithMenuDialog';\nimport WithContentSidebar from '../Ncurses/wrapper/WithContentSidebar';\nimport WithContentSidebarBody from '../Ncurses/wrapper/WithContentSidebarBody';\n\nimport {useAppDispatch} from '../../app/store';\n\nconst Challenges: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const challenges = useSelector(selectChallenge);\n  const authState = useSelector(selectAuth);\n  const [currentQ, setCurrentQ] = useState(1);\n  let init;\n  if (challenges !== null) {\n    init = challenges[0].challengeBody;\n  } else {\n    init = '<p> Loading...</p>';\n  }\n  const [currentQBody, setCurrentQBody] = useState(init);\n\n  const setBody = (c: number) => {\n    if (challenges !== null) {\n      challenges.forEach((i: challenge) => {\n        if (i.id === c) setCurrentQBody(i.challengeBody);\n      });\n    }\n  };\n\n  console.log(currentQBody);\n  const viewQuestion = (c: number) => {\n    setCurrentQ(c);\n    setBody(c);\n  };\n  if (authState === isAuthenticated.challengeReady) {\n    return (\n      <WithMenuDialog\n        size={menuDialogSize.big}\n        menuTitle={'Challenges'}\n        topText={\n          'Solve these challges to find flags. Flags will be in the form nCTF{secret-goes-in-here}'\n        }\n        pageTitle={'Challenges'}>\n        <WithContentColumned>\n          <WithContentSidebar>\n            <ShowTitles onClick={viewQuestion} activeID={currentQ} />\n          </WithContentSidebar>\n          <WithContentSidebarBody>\n            <ShowQuestion body={currentQBody} id={currentQ} />\n          </WithContentSidebarBody>\n        </WithContentColumned>\n      </WithMenuDialog>\n    );\n  } else {\n    return <Redirect to=\"/\" />;\n  }\n};\n\nexport default Challenges;\n","import Root from './Root';\nexport default Root;\n","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {\n  selectAuth,\n  thunkedGetState,\n  isAuthenticated,\n} from '../../app/reducers/authSlice';\nimport {\n  selectChallenge,\n  fetchChallenges,\n} from '../../app/reducers/challengeSlice';\nimport {store, useAppDispatch} from '../../app/store';\n\nconst Root: React.FC = () => {\n  const authVal = useSelector(selectAuth);\n\n  localStorage.setItem(\n    'kladmdf;lkdmkfmslkdmkl;smdkfmkfsd',\n    'nCTF{zlZ6QPh97sg16ds856RK0DIK1waNJwy}',\n  );\n  switch (authVal) {\n    case isAuthenticated.loggedIn:\n      return <Redirect to=\"/loading\" />; //TODO show rules//<Redirect to=\"/register\" />;\n    //TODO this redirect should be replaced with a rules component\n    case isAuthenticated.challengeReady:\n      return <Redirect to=\"/challenges\" />;\n    case isAuthenticated.loggedOut:\n      return <Redirect to=\"/login\" />;\n    case isAuthenticated.timerOver:\n      return <Redirect to=\"/logout\" />;\n    case isAuthenticated.tooEarly:\n      return <Redirect to=\"/logout\" />;\n  }\n};\nexport default Root;\n","import API from './api';\n\nconst logout = () =>\n  fetch(API.LOGOUT, {\n    credentials: 'include',\n  }).then(response => response.json());\n\nexport default logout;\n","import Logout from './Logout';\nexport default Logout;\n","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\n\n//redux stuff\nimport {useAppDispatch} from '../../app/store';\nimport {\n  selectAuth,\n  setLoggedOut,\n  isAuthenticated,\n} from '../../app/reducers/authSlice';\n\nimport logout from '../../app/API/logout';\n\nconst Logout: React.FC = () => {\n  const authState = useSelector(selectAuth);\n  const dispatch = useAppDispatch();\n\n  if (authState === isAuthenticated.challengeReady) {\n    dispatch(setLoggedOut());\n    logout();\n  }\n\n  return <Redirect to=\"/login\" />;\n};\nexport default Logout;\n","import React from 'react';\n\ntype progressProps = {\n  completed: number;\n};\n\n// TODO animation\n\n// TODO animation\nconst ProgressBar: React.FC<progressProps> = ({completed}) => {\n  const bgcolor = '#32b31d';\n\n  const containerStyles = {\n    height: 13,\n    width: '100%',\n    display: 'flex',\n  } as React.CSSProperties;\n\n  const fillerBoxStyles = {\n    height: '100%',\n    width: `10%`,\n    border: '0.1px solid',\n    borderColor: '#fff',\n    textAlign: 'right',\n  } as React.CSSProperties;\n\n  const numBoxes = [];\n  for (let i = 0; i < 30; i++) {\n    numBoxes.push(i);\n  }\n\n  const boxes = numBoxes.map(_ => <div style={fillerBoxStyles} />);\n  return <div style={containerStyles}>{boxes}</div>;\n};\n\nexport default ProgressBar;\n","import Loading from './Loading';\nexport default Loading;\n","import React from 'react';\n\nimport ProgressBar from './ProgressBar';\n\nimport WithContentContainer from '../Ncurses/wrapper/WithContentContainer';\nimport WithMenuDialog, {\n  menuDialogSize,\n} from '../Ncurses/wrapper/WithMenuDialog';\n\nconst Loading: React.FC = () => (\n  <WithMenuDialog\n    size={menuDialogSize.loading}\n    menuTitle={'Loading'}\n    topText={''}\n    pageTitle={'Loading'}>\n    <ProgressBar completed={100} />\n  </WithMenuDialog>\n);\n\nexport default Loading;\n","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\nimport Login from './Login';\nimport Leaderboard from './Leaderboard';\nimport Challenges from './Challenges';\nimport Root from './Root';\nimport Logout from './Logout';\nimport Loading from './Loading';\n\nconst Routes: React.FunctionComponent = () => (\n  <Switch>\n    <Route component={Leaderboard} path=\"/leaderboard\" />\n    <Route component={Challenges} path=\"/challenges\" />\n    <Route component={Login} path=\"/login\" />\n    <Route component={Logout} path=\"/logout\" />\n    <Route component={Loading} exact path=\"/loading\" />\n    <Route component={Root} exact path=\"/\" />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\n\n\nimport {useAppDispatch} from './app/store';\nimport {selectChallenge, thunkedGetChallenges, addChallenge} from './app/reducers/challengeSlice';\nimport {useSelector} from 'react-redux';\nimport {\n  selectAuth,\n  isAuthenticated,\n} from './app/reducers/authSlice';\n\nimport {getChallenges} from  './app/API/getChallenges';\n\nimport API from  './app/API/api';\n\n// Componento:\n//\nimport Heading from './components/Heading';\nimport Navbar from './components/Navbar';\nimport BanMobileDevices from './components/Ncurses/BanMobileDecives';\nimport Routes from './components/Routes';\n\n// Stylesheets:\nimport './ncurses.css';\n\nconst App = () => {\n   const dispatch = useAppDispatch();\n  const challenges = useSelector(selectChallenge);\n   const authVal = useSelector(selectAuth);\n  //  if (authVal  !== isAuthenticated.loggedOut && challenges === null){\n  if ( challenges === null ){\n    fetch(\"http://localhost:8080/api/get-challenges\", {\n          credentials: 'include',\n      }).then(data => data.json()).then((res) =>\n        dispatch(addChallenge(res)));\n  //}\n  }\n\n  if (window.matchMedia('(max-width: 1000px)').matches) {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <BanMobileDevices />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Heading />\n        <div className=\"container\">\n          <Routes />\n        </div>\n        // End of container div\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n//import {PersistGate} from 'redux-persist/integration/react';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './app/store';\n\nimport {thunkedGetState, isAuthenticated} from './app/reducers/authSlice';\n\nimport {thunkedGetChallenges} from './app/reducers/challengeSlice';\nimport {saveState} from './app/utils/persistState';\n\nstore.subscribe(() => saveState(store.getState()));\n\n\nstore.dispatch(thunkedGetState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import API from './api';\n\nexport const getState = () =>\n   fetch(API.GET_STATE, {\n    method: 'get',\n    credentials: 'include',\n  }).then(response => response.json());\n"],"sourceRoot":""}